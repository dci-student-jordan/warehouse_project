services:
    nginx:
        container_name: warehousewebserver
        #restart: always
        image: nginx:latest
        volumes:
            - ./nginx.conf:/etc/nginx/conf.d/default.conf
            - static_volume:/var/www/staticfiles
        ports:
            - "80:80"
        depends_on:
            - web
    web:
        container_name: warehousewebapp
        image: warehousewebappimg:v1
        build: .
        #restart: always
        ports:
            - "8001:8001"
        env_file:
            - env
        volumes:
            - .:/app
            - static_volume:/app/staticfiles
        command: 
        # need a hack here to have the right order of migrations and populating the database
        >
            sh -c "if [ ! -f /.initialized ]; then python manage.py makemigrations warehouses && python manage.py migrate warehouses 0001_initial --no-input && python manage.py shell -c 'from cli.db.populate_database import main; main(\"--initial\")' && python manage.py migrate warehouses 0002_alter_item_category_alter_item_state && python manage.py migrate && python manage.py collectstatic --no-input && gunicorn djangowhp.wsgi:application -b 0.0.0.0:8001 && touch /.initialized; fi"
        depends_on:
            - db

    db:
        container_name: warehousedbserver
        image: postgres:16
        volumes:
            - postgres_data:/var/lib/postgresql/data/
        ports:
            - "5432:5432"
        env_file:
            - env
        environment:
            - "POSTGRES_HOST_AUTH_METHOD=trust"

volumes:
    postgres_data:
    static_volume:
